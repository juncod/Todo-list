{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","useRecoilState","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","localStorage","setItem","JSON","stringify","DOING","DONE","ToDoList","getSave","setCategory","useEffect","getItem","retrievedObject","parse","value","onInput","map","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","boxColor","accentColor","document","getElementById"],"mappings":"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","file":"static/js/main.fd35010f.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\n\r\nexport enum Categories {\r\n    \"TO_DO\" = \"TO_DO\",\r\n    \"DOING\" = \"DOING\",\r\n    \"DONE\" = \"DONE\",\r\n}\r\n\r\nexport interface IToDo {\r\n    text: string;\r\n    id: number;\r\n    category: Categories;\r\n};\r\n\r\nexport const categoryState = atom<Categories>({\r\n    key: \"category\",\r\n    default:Categories.TO_DO,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n    key:\"toDo\",\r\n    default:[],\r\n});\r\n\r\n\r\nexport const toDoSelector = selector({\r\n    key:\"toDoSelector\",\r\n    get:({ get }) => {\r\n        const toDos = get(toDoState);\r\n        const category = get(categoryState);\r\n        return toDos.filter((toDo)=> toDo.category === category);\r\n    },\r\n});","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue ,useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n    toDo:string;\r\n}\r\n\r\nfunction CreateToDo(){\r\n    const setToDos = useSetRecoilState(toDoState);\r\n    const category = useRecoilValue(categoryState);\r\n    const { register, handleSubmit, setValue } = useForm<IForm>()\r\n    const handleVaild = ({toDo}:IForm) => {\r\n        setToDos((oldToDos)=>[{text:toDo,id:Date.now(),category},...oldToDos])\r\n        setValue(\"toDo\",\"\");\r\n    };\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit(handleVaild)}>\r\n        <input {...register(\"toDo\",{required:\"Please write a To Do\"})} placeholder=\"Write a to do\"/>\r\n        <button>add</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CreateToDo;","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { Categories, IToDo, toDoState } from \"../atoms\";\r\n\r\n\r\nfunction ToDo({ text, category, id }: IToDo){\r\n    const [toDos, setToDos] = useRecoilState(toDoState);\r\n    const onClick = (event:React.MouseEvent<HTMLButtonElement>) =>{\r\n        const {\r\n            currentTarget : {name},\r\n        } = event;\r\n        setToDos((oldToDos)=>{\r\n            const targetIndex = oldToDos.findIndex((toDo)=> toDo.id === id)\r\n            const newToDo = {text, id, category:name as any};\r\n\r\n            return [\r\n                ...oldToDos.slice(0,targetIndex),\r\n                newToDo,\r\n                ...oldToDos.slice(targetIndex+1)\r\n            ];\r\n        })\r\n    }\r\n    const doDelete = () =>{\r\n        setToDos((oldToDos)=>{\r\n            const targetIndex = oldToDos.findIndex((toDo)=> toDo.id === id)\r\n            return [\r\n                ...oldToDos.slice(0,targetIndex),\r\n                ...oldToDos.slice(targetIndex+1)\r\n            ];\r\n        })\r\n    }\r\n    localStorage.setItem(\"save\",JSON.stringify(toDos));\r\n    return(\r\n        <li>\r\n            <span>{text}</span>\r\n            {category !== Categories.DOING && (\r\n            <button name={Categories.DOING} onClick={onClick}>Doing</button>)}\r\n            {category !== Categories.TO_DO && (\r\n            <button name={Categories.TO_DO} onClick={onClick}>To Do</button>)}\r\n            {category !== Categories.DONE && (\r\n            <button name={Categories.DONE} onClick={onClick}>Done</button>)}\r\n            <button onClick={doDelete}>delete</button>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React, { useEffect } from \"react\";\r\nimport { useRecoilValue, useRecoilState, useSetRecoilState} from \"recoil\";\r\nimport { toDoState, Categories, toDoSelector, categoryState } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\n\r\n\r\nfunction ToDoList() {\r\nconst getSave = useSetRecoilState(toDoState);\r\nconst toDos = useRecoilValue(toDoSelector);\r\nconst [category, setCategory] = useRecoilState(categoryState);\r\n\r\nuseEffect( () => {\r\n    if (localStorage.getItem(\"save\")){\r\n    var retrievedObject = localStorage.getItem(\"save\")\r\n    getSave(JSON.parse(retrievedObject as any))\r\n    }\r\n  }, []);\r\nconst onInput = (event:React.FormEvent<HTMLSelectElement>)=>{\r\n    setCategory(event.currentTarget.value as any);\r\n}\r\n    return (\r\n        <div>\r\n        <h1>To Dos</h1>\r\n        <hr />\r\n        <select value={category} onInput={onInput}>\r\n          <option value={Categories.TO_DO}>To Do</option>\r\n          <option value={Categories.DOING}>Doing</option>\r\n          <option value={Categories.DONE}>Done</option>\r\n        </select>\r\n        <CreateToDo />\r\n        {toDos?.map((toDo) => (\r\n          <ToDo key={toDo.id} {...toDo} />\r\n        ))}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\"\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkmode } from \"./theme\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkmode}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkmode: DefaultTheme = {\r\n    bgColor: \"#2f3640\",\r\n    boxColor: \"#1d242e\",\r\n    textColor: \"#f5f6fa\",\r\n    accentColor: \"#9c88ff\",\r\n};\r\n\r\nexport const lightmode: DefaultTheme = {\r\n    bgColor: \"#e6eaf0\",\r\n    boxColor: \"#ffffff\",\r\n    textColor: \"#2b2c33\",\r\n    accentColor: \"#eb21a1\",\r\n};"],"sourceRoot":""}